name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 src/ tests/

  test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install .

    - name: Set PYTHONPATH environment variable
      run: |
        echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV
        echo "PYTHONPATH is set to $PYTHONPATH"

    - name: Run tests
      run: |
        pytest tests/ --disable-warnings

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to (your deployment target)
      # Example: Deploy to a local server
      run: |
        # Your deployment script here
        # Step 1: Install dependencies
        pip install -r requirements.txt
    
        # Step 2: Set environment variables (if needed)
        export FLASK_APP=app.py  # Replace `app.py` with your main Flask application file
        export FLASK_ENV=production  # Set production mode for Flask
    
        # Step 3: Initialize the database (if applicable)
        # flask db upgrade  # Uncomment if needed for database migrations
    
        # Step 4: Start the Flask application
        flask run --host=0.0.0.0 --port=8000
    
        # Optional: Use a production WSGI server like Gunicorn for production
        # gunicorn -w 4 -b 0.0.0.0:8000 app:app
      shell: bash
      env:
        pythonLocation: /opt/hostedtoolcache/Python/3.9.21/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.9.21/x64/lib

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # or your desired Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run linter
      run: |
        flake8 src tests --count --select=E9,E7,E5,F,C901,W --show-source --statistics
        flake8 src tests --count --exit-zero # To continue even after finding errors
